{"extracted_information": "This GitHub repository provides a starter template for building a SaaS subscription application using Next.js and integrating with Stripe for payments and Supabase for backend services. Note: This repository has been sunset and replaced by a newer template: https://github.com/nextjs/saas-starter.", "specifications": {}, "pricing": {"supported_pricing_models": "Stripe Checkout currently supports pricing that bills a predefined amount at a specific interval. More complex plans (e.g., different pricing tiers or seats) are not yet supported.", "example_pricing_tiers": [{"product": "Hobby", "prices": ["10 USD per month", "100 USD per year"]}, {"product": "Freelancer", "prices": ["20 USD per month", "200 USD per year"]}]}, "features": [{"name": "Secure User Management and Authentication", "description": "Utilizes Supabase for robust user management and authentication processes."}, {"name": "Powerful Data Access & Management", "description": "Built on top of PostgreSQL with Supabase, offering comprehensive tooling for data access and management."}, {"name": "Stripe Integration", "description": "Seamless integration with Stripe Checkout for payment processing and the Stripe customer portal for subscription management."}, {"name": "Automatic Pricing and Subscription Syncing", "description": "Automatically syncs pricing plans and subscription statuses between Stripe and the application via Stripe webhooks."}], "statistics": {"github_stars": "7.5k", "github_forks": "1.6k", "github_watchers": "63", "github_contributors": "31"}, "temporal_info": {"repository_status": "Archived by owner on Jan 23, 2025. It is now read-only.", "sunset_date": "Jan 23, 2025 (archived)", "replacement_template": "https://github.com/nextjs/saas-starter"}, "geographical_data": {}, "references": [], "technologies": {"frontend_framework": "Next.js", "payment_gateway": "Stripe (Stripe Checkout, Stripe Customer Portal, Stripe Webhooks)", "backend_services": "Supabase (Authentication, PostgreSQL Database)", "deployment": "Vercel", "package_manager": "pnpm", "containerization_for_local_dev": "Docker", "cli_tools": "Stripe CLI, Vercel CLI, Supabase CLI", "languages": {"TypeScript": "86.5%", "PLpgSQL": "10.6%", "CSS": "2.1%", "JavaScript": "0.8%"}}, "setup_process": {"overview": "The setup process involves initiating deployment, configuring authentication, setting up Stripe, and optionally, developing locally with a dedicated Supabase instance and Stripe webhook forwarding.", "deployment_and_configuration": [{"step": "Initiate Deployment", "details": "Use the Vercel Deploy Button for automated setup, which creates a new GitHub repository, guides through Supabase project creation, sets environment variables, and runs SQL migrations. Alternatively, manually create a Supabase account/project and use the 'Stripe Subscriptions' SQL template."}, {"step": "Configure Authentication (Supabase Auth)", "details": "Set up an OAuth app with GitHub and configure Supabase as an auth provider. Define the main production URL (e.g., `https://your-deployment-url.vercel.app`) as the `NEXT_PUBLIC_SITE_URL` in Supabase's URL configuration and as a Vercel production environment variable. Optionally, set up redirect wildcards for deploy previews if not using the Vercel Deploy Button. Ensure Supabase database migrations are run (automated via Deploy Button or manually by pasting `schema.sql`). Manually configure Supabase environment variables (`NEXT_PUBLIC_SUPABASE_ANON_KEY`, `SUPABASE_SERVICE_ROLE_KEY`, `NEXT_PUBLIC_SUPABASE_URL`) in Vercel if not using the Deploy Button."}, {"step": "Configure Stripe", "details": "Create a webhook in the Stripe Developers section with an endpoint URL like `https://your-deployment-url.vercel.app/api/webhooks`, selecting 'all events'. Copy the `Signing secret` and set it as the `STRIPE_WEBHOOK_SECRET` environment variable. Ensure `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY` and `STRIPE_SECRET_KEY` are also set. Redeploy the application in Vercel for changes to take effect. Create product and pricing information in the Stripe Dashboard, adhering to supported pricing models. Optionally, use the Stripe CLI with `fixtures/stripe-fixtures.json` to bootstrap test data. Configure the Stripe customer portal settings, enabling options like updating/canceling subscriptions and payment methods, and adding products/prices."}], "local_development": [{"step": "Clone Repository & Install Dependencies", "details": "Clone the GitHub repository and install dependencies using `pnpm install`."}, {"step": "Vercel CLI Setup", "details": "Link the project using `pnpm dlx vercel login` and `pnpm dlx vercel link`. Download development environment variables with `pnpm dlx vercel env pull .env.local`, then manually set `SUPABASE_SERVICE_ROLE_KEY`."}, {"step": "Local Supabase Instance", "details": "Requires Docker. Copy/rename `.env.local.example` and `.env.example` to `.env.local` and `.env` respectively. Start local Supabase with `pnpm supabase:start`, which also runs migrations. Copy the `service_role_key` to `SUPABASE_SERVICE_ROLE_KEY` in `.env.local`. Link the local Supabase instance to the remote project using `pnpm supabase:link`. Commands are available to pull schema changes, seed data, generate TypeScript types, generate migrations, and push changes to the remote database."}, {"step": "Stripe CLI for Webhooks", "details": "Log in to your Stripe account via `pnpm stripe:login`. Start local webhook forwarding with `pnpm stripe:listen` and set the provided `STRIPE_WEBHOOK_SECRET` in `.env.local`. Also set test mode `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY` and `STRIPE_SECRET_KEY`."}, {"step": "Run Next.js Client", "details": "Start the development server with `pnpm dev`. Both webhook forwarding (Stripe CLI) and the Next.js development server must run concurrently."}], "going_live": [{"step": "Archive Test Products", "details": "Archive all test mode Stripe products before transitioning to live."}, {"step": "Configure Production Environment Variables", "details": "Switch Stripe to 'production mode' and obtain new live mode API keys and a separate production mode webhook. Copy these values to Vercel, replacing the test mode values."}, {"step": "Redeploy", "details": "Rebuild and redeploy the production deployment in Vercel (without using existing build cache) for changes to take effect. Verify by testing with a Stripe test card, which should not work in production."}]}}